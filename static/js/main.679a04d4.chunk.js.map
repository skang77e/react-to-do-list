{"version":3,"sources":["to-do-list.png","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoList","_this","this","react_default","a","createElement","ListGroup","flush","props","items","map","item","index","ListGroupItem","color","tag","key","Button","onClick","removeItem","bind","close","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","event","setState","term","target","value","addItem","preventDefault","state","concat","toConsumableArray","newItems","assign","splice","Container","Row","Col","className","src","image","alt","onSubmit","FormGroup","Label","for","InputGroup","Input","InputGroupAddon","addonType","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gXCiBzBC,mLAXN,IAAAC,EAAAC,KACP,OACMC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,OAAK,GACnBL,KAAKM,MAAMC,MAAMC,IAAI,SAACC,EAAKC,GAAN,OAAgBT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAeC,MAAM,OAAOC,IAAI,KAAKC,IAAMJ,GAAQD,EAAKR,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAQC,QAAUjB,EAAKO,MAAMW,WAAWC,KAAKnB,EAAMW,GAAQS,OAAK,eAJ3IC,aCyERC,cApEX,SAAAA,EAAYf,GAAO,IAAAP,EAAA,OAAAuB,OAAAC,EAAA,EAAAD,CAAAtB,KAAAqB,IACnBtB,EAAAuB,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1B,KAAMM,KAORqB,SAAW,SAACC,GACb7B,EAAK8B,SACJ,CACCC,KAAMF,EAAMG,OAAOC,SAXCjC,EAgBrBkC,QAAU,SAACL,GACTA,EAAMM,iBACa,KAAnBnC,EAAKoC,MAAML,MACb/B,EAAK8B,SACJ,CACEC,KAAM,GACNvB,MAAK,GAAA6B,OAAAd,OAAAe,EAAA,EAAAf,CAAMvB,EAAKoC,MAAM5B,OAAjB,CAAwBR,EAAKoC,MAAML,UAtBtB/B,EA2BrBkB,WAAa,SAACP,EAAOkB,GACtB,IAAMU,EAAWhB,OAAOiB,OAAO,GAAIxC,EAAKoC,MAAM5B,OAC9C+B,EAASE,OAAO9B,EAAO,GACvBX,EAAK8B,SAAS,CAACtB,MAAM+B,KA5BlBvC,EAAKoC,MAAQ,CACXL,KAAM,GACNvB,MAAO,IAJUR,wEAkCnB,OACEE,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACJxC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KACEzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAKC,UAAU,eAChB3C,EAAAC,EAAAC,cAAA,OAAKyC,UAAW,OAAOC,IAAOC,IAAOC,IAAK,iBAG3C9C,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KACQzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KACP1C,EAAAC,EAAAC,cAAA,QAAM6C,SAAUhD,KAAKiC,SACnBhC,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAWL,UAAU,OAChB3C,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,IAAI,YAAX,cACAlD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,KACJnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CACArB,MAAOhC,KAAKmC,MAAML,KACnBH,SAAU3B,KAAK2B,WAEf1B,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAiBC,UAAU,WAAUtD,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAQH,MAAM,UAAUI,QAAShB,KAAKiC,SAAtC,eAGpChC,EAAAC,EAAAC,cAACqD,EAAD,CACDjD,MAASP,KAAKmC,MAAM5B,MACpBU,WAAajB,KAAKiB,yBAzDLG,aCGEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.679a04d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/to-do-list.63dda514.png\";","import React, { Component } from 'react';\nimport { Button, ListGroup, ListGroupItem } from 'reactstrap';\n\n\n\nclass TodoList extends Component{\t\n\trender(){\n\t\treturn(\n      \t\t<ListGroup flush>\n\t\t\t\t{this.props.items.map((item,index) => <ListGroupItem color=\"info\" tag=\"li\" key ={index}>{item}<Button onClick ={this.props.removeItem.bind(this, index)} close />\n</ListGroupItem>\n\t\t\t\t)}\n\t\t\t</ListGroup>\n\t\t)\n\t}\n}\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport { InputGroup, InputGroupAddon, Button,FormGroup, Label, Input, Container, Row, Col } from 'reactstrap';\n\nimport './App.css'\nimport image from './to-do-list.png';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport TodoList from './components/TodoList'\n\n\nclass App extends Component {\n    constructor(props) {\n    super(props);\n    this.state = {\n      term: '',\n      items: []\n    }\n  }\n\n  onChange = (event) => {\n\tthis.setState(\n\t\t{ \n\t\t\tterm: event.target.value \n\t\t}\n\t)\n  }\n\n  addItem = (event) => {\t\n    event.preventDefault();\n\tif(this.state.term !==\"\"){\n\t\tthis.setState(\n\t\t\t{\n\t\t\t  term: '',\n\t\t\t  items: [...this.state.items, this.state.term]\n\t\t\t}\n\t\t)\n\t}\n  }  \n  removeItem = (index, event) =>{\n\tconst newItems = Object.assign([], this.state.items); \n\tnewItems.splice(index, 1);\n\tthis.setState({items:newItems});\n  }\n  \n  render() {\n    return (\n      <Container>\n\t\t<Row>\n\t\t  <Col className=\"text-center\">\n\t\t\t<img className =\"logo\" src = {image} alt =\"To Do List\"/>\n\t\t  </Col>\n\t\t</Row>\n\t\t<Row>\n          <Col>\n\t\t\t<form onSubmit={this.addItem}>\n\t\t\t  <FormGroup className=\"App\">\n\t\t        <Label for=\"TodoList\">To do List</Label>\n\t\t        <InputGroup>\n\t\t\t\t  <Input                 \n \t\t\t\t\tvalue={this.state.term} \n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t  />\t\t\t\t  \t\t\n\t\t\t\t\t<InputGroupAddon addonType=\"prepend\"><Button color=\"primary\" onClick={this.addItem}>Add to-do</Button></InputGroupAddon>\n\t\t\t\t  </InputGroup>\n\n\t\t\t\t  <TodoList \n\t\t\t\t\titems = {this.state.items} \n\t\t\t\t\tremoveItem ={this.removeItem}\n\t\t\t\t  />\n\t\t\n\t\t      </FormGroup>\n      \t\t</form>\n\t\t  </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}